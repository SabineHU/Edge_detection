#pragma kernel EdgeDetectionDepth
#pragma kernel EdgeDetectionColor
#pragma kernel EdgeDetectionNormal
#pragma kernel EdgeDetectionCustom

#pragma kernel GaussianBlur

// Required for decompression
#include "UnityCG.cginc"

// Input buffers
Texture2D<float4> _CameraColorBuffer;
Texture2D<float4> _CameraDepthNormalsTexture;
Texture2D<float4> _BlurColorBuffer;

// Output buffer
RWTexture2D<float4> _EdgesBufferRW;
RWTexture2D<float4> _BlurBufferRW;

#define M_PI 3.14159

static float2 sobelPointsPositions[9] = {
    float2(-1,  1), float2(0,  1), float2(1,  1),
    float2(-1,  0), float2(0,  0), float2(1,  0),
    float2(-1, -1), float2(0, -1), float2(1, -1),
};

static float sobelXMatrix[9] = {
    1, 0, -1,
    2, 0, -2,
    1, 0, -1,
};

static float sobelYMatrix[9] = {
     1,  2,  1,
     0,  0,  0,
    -1, -2, -1,
};

float4 ComputeSobelFilter(Texture2D<float4> buffer, uint2 id, float threshold_min) {
    float4 gx = float4(0.0, 0.0, 0.0, 0.0);
    float4 gy = float4(0.0, 0.0, 0.0, 0.0);

    // Compute convolution
    for (int i = 0; i < 9; ++i) {
        const float4 color = buffer.Load(int3(id.xy + sobelPointsPositions[i], 0));

        // horizontal
        float value = sobelXMatrix[i];
        gx += float4(value, value, value, value) * color;

        // vertical
        value = sobelYMatrix[i];
        gy += float4(value, value, value, value) * color;
    }

    // Compute gradient magnitude
    float4 g = sqrt(gx * gx + gy * gy);

    // Apply threshold
    g.r = g.r < threshold_min ? 0.0 : g.r;
    g.g = g.g < threshold_min ? 0.0 : g.g;
    g.b = g.b < threshold_min ? 0.0 : g.b;
    g.a = g.a < threshold_min ? 0.0 : g.a;

    return g;
}

float4 ComputeToneMapping(const float gamma, float4 color) {
    float4 mapped = color / (color + 1.0);
    return pow(mapped, 1.0 / gamma);
}

[numthreads(8, 8, 1)]
void EdgeDetectionDepth(uint3 id : SV_DispatchThreadID)
{
    const float threshold_min = 0.075;
    float4 g = ComputeSobelFilter(_CameraDepthNormalsTexture, id, threshold_min);

    _EdgesBufferRW[id.xy] = float4(g.zw, 0.0, 1.0);
}

[numthreads(8, 8, 1)]
void EdgeDetectionColor(uint3 id : SV_DispatchThreadID)
{
    const float threshold_min = 0.085;
    float4 g = ComputeSobelFilter(_BlurColorBuffer, id, threshold_min);

    g = ComputeToneMapping(2.2, g);
    _EdgesBufferRW[id.xy] = float4(g.rgb, 1.0);
}

[numthreads(8, 8, 1)]
void EdgeDetectionNormal(uint3 id : SV_DispatchThreadID)
{
    const float threshold_min = 0.25;
    float4 g = ComputeSobelFilter(_CameraDepthNormalsTexture, id, threshold_min);

    _EdgesBufferRW[id.xy] = float4(g.xy, 0.0, 1.0);
}

[numthreads(8, 8, 1)]
void EdgeDetectionCustom(uint3 id : SV_DispatchThreadID)
{
    float4 blur = float4(0.0, 0.0, 0.0, 0.0);
    const float weight[7] = { 0.09, 0.11, 0.18, 0.24, 0.18, 0.11, 0.09 };

    // Bloom
    for (int i = 0, j = -3; i < 5; ++i, ++j) {
        blur += ComputeSobelFilter(_BlurColorBuffer, id + float2(j, 0.0), 0.25) * weight[i];
        blur += ComputeSobelFilter(_BlurColorBuffer, id - float2(j, 0.0), 0.25) * weight[i];
        blur += ComputeSobelFilter(_BlurColorBuffer, id + float2(0.0, j), 0.25) * weight[i];
        blur += ComputeSobelFilter(_BlurColorBuffer, id - float2(0.0, j), 0.25) * weight[i];
    }

    // Compute SobelFilter
    float4 normal = ComputeSobelFilter(_CameraDepthNormalsTexture, id, 0.075);
    float4 color = ComputeSobelFilter(_CameraColorBuffer, id, 0.085);
    float4 depth = ceil(normal.wwww - 0.12);

    // Apply threshold
    float threshold = 0.2;
    if (normal.x < threshold)
        normal.x = 0.0;
    if (normal.y < threshold)
        normal.y = 0.0;

    // Get final color
    float4 colorBuffer = _CameraColorBuffer.Load(int3(id.xy, 0));
    float4 res = (blur + ceil(blur + color)) * colorBuffer;
    float4 mapped = ComputeToneMapping(2.2, res) * 1.2;;
    res = min(normal.gggg + normal.rrrr, 1.0) * res;

    _EdgesBufferRW[id.xy] = float4((mapped + res).rgb, 1.0);
}

static float blurMatrix[25] = {
    2,  4,  5,  4, 2,
    4,  9, 12,  9, 4,
    5, 12, 15, 12, 5,
    4,  9, 12,  9, 4,
    2,  4,  5,  4, 2,
};

float3 ComputeGaussianBlur(Texture2D<float4> buffer, uint2 id) {
    float3 blur = float3(0.0, 0.0, 0.0);

    // Compute blur convolution
    int2 idx = int2(-2, 2);
    for (int i = 0; i < 25; ++i) {
        const float3 color = buffer.Load(int3(id.xy + idx, 0)).rgb;

        const float value = blurMatrix[i];
        blur += float3(value, value, value) * color;

        // Check if end of matrix line
        idx.x += 1;
        if (idx.x == 3) {
            idx.x = -2;
            idx.y -= 1;
        }
    }

    blur /= 159.0;
    return blur;
}

[numthreads(8, 8, 1)]
void GaussianBlur(uint3 id : SV_DispatchThreadID)
{
    float3 blur = ComputeGaussianBlur(_CameraColorBuffer, id.xy);
    _BlurBufferRW[id.xy] = float4(blur, 1.0);
}
